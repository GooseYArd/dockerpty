# dockerpty: .travis.yml
#
# Copyright 2014 Chris Corbyn <chris@w3style.co.uk>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

language: python
python: [ "2.7" ]

before_install: |
  #!/bin/bash

  # needed for the UML container
  sudo apt-get install -qq -y slirp aufs-tools cgroup-lite

  # prepare docker dir for aufs mount
  sudo mkdir -p /var/lib/docker

  # download usermode linux kernel for docker
  curl -sLo linux https://github.com/jpetazzo/sekexe/raw/master/uml
  chmod +x linux

  # download docker
  curl -sLo docker \
    https://get.docker.io/builds/Linux/x86_64/docker-1.0.0
  chmod +x docker

  # we'll take our result from here
  echo 1 > /tmp/build.status

  # create run script
  cat > run.sh <<'BASH'
  #!/bin/bash

  # go back to where we were invoked
  cd $WORKDIR

  save_and_shutdown() {
    # save built for host result
    echo $? > /tmp/build.status
    # force clean shutdown
    halt -f
  }

  # make sure we shut down cleanly
  trap save_and_shutdown EXIT

  # configure path to include /usr/local
  export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  # can't do much without proc!
  mount -t proc none /proc

  # pseudo-terminal devices
  mkdir -p /dev/pts
  mount -t devpts none /dev/pts

  # shared memory a good idea
  mkdir -p /dev/shm
  mount -t tmpfs none /dev/shm

  # sysfs a good idea
  mount -t sysfs none /sys

  # pidfiles and such like
  mkdir -p /var/run
  mount -t tmpfs none /var/run

  # takes the pain out of cgroups
  cgroups-mount

  # mount /var/lib/docker with a tmpfs
  mount -t tmpfs none /var/lib/docker

  # enable ipv4 forwarding for docker
  echo 1 > /proc/sys/net/ipv4/ip_forward

  # configure networking
  ip addr add 127.0.0.1 dev lo
  ip link set lo up
  ip addr add 10.1.1.1/24 dev eth0
  ip link set eth0 up
  ip route add default via 10.1.1.254

  # configure dns (google public)
  mkdir -p /run/resolvconf
  echo 'nameserver 8.8.8.8' > /run/resolvconf/resolv.conf
  mount --bind /run/resolvconf/resolv.conf /etc/resolv.conf

  # start docker backgrounded
  ((./docker -d >/dev/null 2>&1 &) &)
  sleep 5

  # activate virtualenv
  source $HOME/virtualenv/python2.7/bin/activate

  # run the build
  behave -c
  BASH

  chmod +x run.sh

install: pip install -r requirements-dev.txt

script: |
  #!/bin/bash

  # run the build inside UML kernel
  ./linux quiet mem=2G rootfstype=hostfs rw \
    eth0=slirp,,/usr/bin/slirp-fullbolt \
    init=$(pwd)/run.sh WORKDIR=$(pwd) HOME=$HOME

  # grab the build result and use it
  exit $(cat /tmp/build.status)
